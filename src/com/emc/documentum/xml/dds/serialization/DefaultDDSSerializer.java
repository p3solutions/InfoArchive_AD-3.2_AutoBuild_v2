/*
 * Decompiled with CFR 0_118.
 */
package com.emc.documentum.xml.dds.serialization;

import com.emc.documentum.xml.dds.configuration.baseline.Bootstrap;
import com.emc.documentum.xml.dds.configuration.baseline.DataSetConfiguration;
import com.emc.documentum.xml.dds.configuration.baseline.ServiceConfiguration;
import com.emc.documentum.xml.dds.configuration.baseline.ServicesConfiguration;
import com.emc.documentum.xml.dds.configuration.baseline.StoresConfiguration;
import com.emc.documentum.xml.dds.configuration.baseline.StructuresConfiguration;
import com.emc.documentum.xml.dds.configuration.baseline.XBasesConfiguration;
import com.emc.documentum.xml.dds.configuration.baseline.security.CryptoSettings;
import com.emc.documentum.xml.dds.configuration.baseline.security.JCESettings;
import com.emc.documentum.xml.dds.configuration.baseline.security.SecureRandomSettings;
import com.emc.documentum.xml.dds.configuration.persistence.esu.ESUStoreConfiguration;
import com.emc.documentum.xml.dds.configuration.persistence.filesystem.FileSystemStoreConfiguration;
import com.emc.documentum.xml.dds.configuration.persistence.filesystem.FileSystemStoreUserConfiguration;
import com.emc.documentum.xml.dds.configuration.persistence.filesystem.UnixStoreConfiguration;
import com.emc.documentum.xml.dds.configuration.persistence.filesystem.WindowsStoreConfiguration;
import com.emc.documentum.xml.dds.configuration.persistence.filesystem.WindowsUNCStoreConfiguration;
import com.emc.documentum.xml.dds.configuration.persistence.xam.CenteraStoreUserConfiguration;
import com.emc.documentum.xml.dds.configuration.persistence.xam.XAMStoreConfiguration;
import com.emc.documentum.xml.dds.configuration.persistence.xdb.ReplicatedXDBStoreConfiguration;
import com.emc.documentum.xml.dds.configuration.persistence.xdb.XDBStoreConfiguration;
import com.emc.documentum.xml.dds.configuration.persistence.xdb.XDBStoreUserConfiguration;
import com.emc.documentum.xml.dds.configuration.user.StoreUserSpec;
import com.emc.documentum.xml.dds.configuration.user.UserConfiguration;
import com.emc.documentum.xml.dds.le.LogicEngineConfiguration;
import com.emc.documentum.xml.dds.persistence.xdb.internal.FixedReplicaSelector;
import com.emc.documentum.xml.dds.serialization.SerializerOptions;
import com.emc.documentum.xml.dds.serialization.xstream.XStreamClassSerializationOptions;
import com.emc.documentum.xml.dds.serialization.xstream.XStreamSerializer;
import com.emc.documentum.xml.dds.serialization.xstream.XStreamSerializerOptions;
import com.emc.documentum.xml.dds.service.DDSServiceType;
import com.emc.documentum.xml.dds.structure.internal.DDSDataSetImpl;
import com.emc.documentum.xml.dds.structure.strategy.DDSStructureStrategy;
import com.emc.documentum.xml.dds.structure.strategy.DocumentumStructureStrategy;
import com.emc.documentum.xml.dds.uri.resolver.AbsoluteDomainResolver;
import com.emc.documentum.xml.dds.uri.resolver.DDSURIResolver;
import com.emc.documentum.xml.dds.usi.AbstractResponseProcessor;
import com.emc.documentum.xml.dds.usi.ProcessorAssociation;
import com.emc.documentum.xml.dds.usi.ResponseServiceConfiguration;
import com.emc.documentum.xml.dds.usi.XBaseAssociation;
import com.emc.documentum.xml.dds.xbase.logbase.LogBaseConfiguration;
import com.emc.documentum.xml.dds.xbase.strategy.RoundRobinStorageStrategy;
import com.emc.documentum.xml.dds.xbase.strategy.SingleFileStorageStrategy;
import com.emc.documentum.xml.dds.xproc.XProcConfiguration;

public final class DefaultDDSSerializer
extends XStreamSerializer {
    public DefaultDDSSerializer() {
        XStreamSerializerOptions options = new XStreamSerializerOptions();
        XStreamClassSerializationOptions classOptions = options.getOptionsForClass(Bootstrap.class);
        classOptions.setClassAlias("bootstrap");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(ServicesConfiguration.class);
        classOptions.setClassAlias("services");
        classOptions.addDefaultImplicitCollection("configurations");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(ServiceConfiguration.class);
        classOptions.setClassAlias("service");
        classOptions.addEntryAlias("dependencies", String.class, "dependency");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(XProcConfiguration.class);
        classOptions.setClassAlias("xprocservice");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(LogicEngineConfiguration.class);
        classOptions.setClassAlias("logicengineservice");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(ResponseServiceConfiguration.class);
        classOptions.setClassAlias("responseservice");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(StructuresConfiguration.class);
        classOptions.setClassAlias("structures");
        classOptions.addDefaultImplicitCollection("configurations");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(StoresConfiguration.class);
        classOptions.setClassAlias("stores");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(XBasesConfiguration.class);
        classOptions.setClassAlias("xbases");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(DataSetConfiguration.class);
        classOptions.setClassAlias("datasetref");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(DDSServiceType.class);
        classOptions.setClassAlias("DDSServiceType");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(JCESettings.class);
        classOptions.setClassAlias("jceSettings");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(CryptoSettings.class);
        classOptions.setClassAlias("crypto");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(SecureRandomSettings.class);
        classOptions.setClassAlias("secureRandom");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(DDSDataSetImpl.class);
        classOptions.setClassAlias("dataset");
        classOptions.addOmittedField("alias");
        classOptions.addOmittedField("storeAlias");
        classOptions.addOmittedField("defaultLocale");
        classOptions.addOmittedField("parent");
        classOptions.addOmittedField("dataStructure");
        classOptions.addOmittedField("metadataStructure");
        classOptions.addOmittedField("storeRoot");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(DDSStructureStrategy.class);
        classOptions.setClassAlias("DDSStructureStrategy");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(DocumentumStructureStrategy.class);
        classOptions.setClassAlias("DocumentumStructureStrategy");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(UserConfiguration.class);
        classOptions.setClassAlias("User");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(StoreUserSpec.class);
        classOptions.setClassAlias("StoreUserSpec");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(DDSURIResolver.class);
        classOptions.addOmittedField("application");
        classOptions.setClassAlias("DDSURIResolver");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(AbsoluteDomainResolver.class);
        classOptions.addOmittedField("application");
        classOptions.setClassAlias("AbsoluteDomainResolver");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(XDBStoreConfiguration.class);
        classOptions.setClassAlias("XDBStore");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(ReplicatedXDBStoreConfiguration.class);
        classOptions.setClassAlias("ReplicatedXDBStore");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(FixedReplicaSelector.class);
        classOptions.setClassAlias("FixedReplicaSelector");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(FileSystemStoreConfiguration.class);
        classOptions.setClassAlias("FileSystemStore");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(WindowsStoreConfiguration.class);
        classOptions.setClassAlias("WindowsStore");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(WindowsUNCStoreConfiguration.class);
        classOptions.setClassAlias("WindowsUNCStore");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(UnixStoreConfiguration.class);
        classOptions.setClassAlias("UnixStore");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(XAMStoreConfiguration.class);
        classOptions.setClassAlias("XAMStore");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(XDBStoreUserConfiguration.class);
        classOptions.setClassAlias("XDBStoreUser");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(FileSystemStoreUserConfiguration.class);
        classOptions.setClassAlias("FileSystemStoreUser");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(CenteraStoreUserConfiguration.class);
        classOptions.setClassAlias("CenteraStoreUser");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(ESUStoreConfiguration.class);
        classOptions.setClassAlias("ESUStore");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(SingleFileStorageStrategy.class);
        classOptions.setClassAlias("SingleFile");
        classOptions.addOmittedField("file");
        classOptions.addOmittedField("xdb");
        classOptions.addOmittedField("storeUser");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(RoundRobinStorageStrategy.class);
        classOptions.setClassAlias("RoundRobin");
        classOptions.addOmittedField("currentFile");
        classOptions.addOmittedField("files");
        classOptions.addOmittedField("xdb");
        classOptions.addOmittedField("storeUser");
        classOptions.addOmittedField("mutex");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(ProcessorAssociation.class);
        classOptions.setClassAlias("processorAssociation");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(AbstractResponseProcessor.class);
        classOptions.addAttribute("id");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(XBaseAssociation.class);
        classOptions.setClassAlias("xBaseAssociation");
        options.addClassOptions(classOptions);
        classOptions = options.getOptionsForClass(LogBaseConfiguration.class);
        classOptions.setClassAlias("LogBase");
        options.addClassOptions(classOptions);
        this.setOptions(options);
    }
}

